== Info: Host localhost:8080 was resolved.
== Info: IPv6: ::1
== Info: IPv4: 127.0.0.1
== Info:   Trying [::1]:8080...
== Info: connect to ::1 port 8080 from ::1 port 59914 failed: Connection refused
== Info:   Trying 127.0.0.1:8080...
== Info: Connected to localhost (127.0.0.1) port 8080
=> Send header, 149 bytes (0x95)
0000: POST /api/v3/generateCode HTTP/1.1
0024: Host: localhost:8080
003a: User-Agent: curl/8.7.1
0052: Accept: */*
005f: Content-Type: application/json
007f: Content-Length: 23
0093: 
=> Send data, 23 bytes (0x17)
0000: {"prompt":"snake game"}
== Info: upload completely sent off: 23 bytes
<= Recv header, 17 bytes (0x11)
0000: HTTP/1.1 200 OK
<= Recv header, 39 bytes (0x27)
0000: x-powered-by: Dart with package:shelf
<= Recv header, 97 bytes (0x61)
0000: access-control-allow-headers: Origin, X-Requested-With, Content-
0040: Type, Accept, x-goog-api-client
<= Recv header, 37 bytes (0x25)
0000: date: Sun, 19 Jan 2025 00:30:45 GMT
<= Recv header, 28 bytes (0x1c)
0000: transfer-encoding: chunked
<= Recv header, 32 bytes (0x20)
0000: access-control-allow-origin: *
<= Recv header, 28 bytes (0x1c)
0000: content-encoding: identity
<= Recv header, 50 bytes (0x32)
0000: access-control-allow-methods: GET, POST, OPTIONS
<= Recv header, 29 bytes (0x1d)
0000: x-frame-options: SAMEORIGIN
<= Recv header, 41 bytes (0x29)
0000: content-type: text/plain; charset=utf-8
<= Recv header, 33 bytes (0x21)
0000: x-xss-protection: 1; mode=block
<= Recv header, 33 bytes (0x21)
0000: x-content-type-options: nosniff
<= Recv header, 2 bytes (0x2)
0000: 
<= Recv data, 53 bytes (0x35)
0000: 31
0004: .CHUNK: import 'dart:async';.import 'dart:math';.
<= Recv data, 69 bytes (0x45)
0000: 
0002: 3F
0006: .CHUNK: import 'package:flutter/material.dart';..void main() {.
<= Recv data, 135 bytes (0x87)
0000: 
0002: 81
0006: .CHUNK:   runApp(const MyApp());.}..class MyApp extends Stateles
0046: sWidget {.  const MyApp({super.key});..  @override.  Widget buil
0086: d
<= Recv data, 149 bytes (0x95)
0000: 
0002: 8F
0006: .CHUNK: (BuildContext context) {.    return MaterialApp(.      t
0046: itle: 'Snake Game',.      theme: ThemeData(.        primarySwatc
0086: h: Colors.green
<= Recv data, 190 bytes (0xbe)
0000: 
0002: B8
0006: .CHUNK: ,.      ),.      home: const GameScreen(),.    );.  }.}.
0046: .class GameScreen extends StatefulWidget {.  const GameScreen({s
0086: uper.key});..  @override.  GameScreenState createState()
<= Recv data, 174 bytes (0xae)
0000: 
0002: A8
0006: .CHUNK:  => GameScreenState();.}..class GameScreenState extends 
0046: State<GameScreen> {.  static const int gridSize = 20;.  late Lis
0086: t<List<bool>> grid;.  List<Offset> snake
<= Recv data, 223 bytes (0xdf)
0000: 
0002: D9
0006: .CHUNK:  = [const Offset(10, 10)];.  Offset food = const Offset(
0046: 5, 5);.  Direction currentDirection = Direction.right;.  bool is
0086: GameOver = false;.  int score = 0;.  late Timer gameTimer;.  sta
00c6: tic const double tileSize
<= Recv data, 213 bytes (0xd5)
0000: 
0002: CF
0006: .CHUNK:  = 20.0;.  bool isGameStarted = false;..  @override.  vo
0046: id initState() {.    super.initState();.    _initializeGrid();. 
0086:  }..  void _initializeGrid() {.    grid = List.generate(.      g
00c6: ridSize,.      
<= Recv data, 208 bytes (0xd0)
0000: 
0002: CA
0006: .CHUNK: (i) => List.generate(gridSize, (j) => false),.    );.   
0046:  _generateFood();.  }..  void _startGame() {.    _resetGame();. 
0086:    setState(() {.      isGameStarted = true;.    });.    gameTim
00c6: er = Timer
<= Recv data, 216 bytes (0xd8)
0000: 
0002: D2
0006: .CHUNK: .periodic(const Duration(milliseconds: 200), (timer) {. 
0046:      if (!isGameOver) {.        _updateGame();.      } else {.  
0086:       timer.cancel();.      }.    });.  }..  void _resetGame() {
00c6: .    setState(() {
<= Recv data, 217 bytes (0xd9)
0000: 
0002: D3
0006: .CHUNK: .      snake = [const Offset(10, 10)];.      currentDire
0046: ction = Direction.right;.      isGameOver = false;.      score =
0086:  0;.      _initializeGrid();.    });.  }..  void _updateGame() {
00c6: .    setState(() {.
<= Recv data, 234 bytes (0xea)
0000: 
0002: E4
0006: .CHUNK:       _moveSnake();.      if (_checkCollision()) {.     
0046:    isGameOver = true;.        gameTimer.cancel();.      }.      
0086: if (_eatFood()) {.        _generateFood();.        score++;.    
00c6:   }.    });.  }..  void _moveSnake()
